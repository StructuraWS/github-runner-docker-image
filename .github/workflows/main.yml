name: Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - 'feature**'
      - 'main'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      APP_NAME: actions-runner
      REGISTRY: ${{ secrets.registry }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to private registry
        uses: docker/login-action@v3
        with:
          registry: "${{ secrets.REGISTRY }}"
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Prepare image tag
        id: prep
        run: |
          SHA=$(echo ${GITHUB_SHA} | head -c8)
          BUILDNUM=${{ github.run_number }}
          IMAGE=${REGISTRY}/${APP_NAME}
          echo "IMAGE ${IMAGE} BUILDNUM ${BUILDNUM} SHA $SHA"
          (echo "tagged_image=${IMAGE}:${BUILDNUM}-${SHA},${IMAGE}:latest"; echo "sha=${SHA}") >> "$GITHUB_OUTPUT"

      - name: Install the latest buildkit release
        run: |
          BUILDKIT_URL="$(curl -sL https://api.github.com/repos/moby/buildkit/releases \
            | jq -r 'map(select(.name|startswith("v")))|sort_by(.name)[-1].assets[]|select(.name|endswith(".linux-amd64.tar.gz")).browser_download_url')"
          curl -H "Authorization: token ${{ secrets.GH_PAT_TOKEN }}" -L "${BUILDKIT_URL}" | sudo tar -xz -C /usr/local

      - name: Start buildkit daemon
        run: |
          sudo --non-interactive --shell <<END_SUDO
            install -d -m 0750 -o root -g docker /run/buildkit
            buildkitd &
            while ! test -S /run/buildkit/buildkitd.sock; do sleep 0.1; done
            chgrp docker /run/buildkit/buildkitd.sock
          END_SUDO

      - name: Build docker image
        run: |
          buildctl build ... \
            --frontend=dockerfile.v0 --local dockerfile=. --local context=. \
            --output type=image,\"name=${{ steps.prep.outputs.tagged_image }}\",push=true

#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Build and push
#        uses: docker/build-push-action@v5
#        with:
#          context: .
#          push: true
#          tags: ${{ steps.prep.outputs.tagged_image }}
#          cache-from: type=registry,ref=${{ steps.prep.outputs.build_cache }}
#          cache-to: type=inline
